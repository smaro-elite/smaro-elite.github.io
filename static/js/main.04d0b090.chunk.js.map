{"version":3,"sources":["Component/Login/LoginContainer.tsx","Component/Navbar/NavbarContainer.tsx","Component/Menu1/Menu1Container.tsx","Component/Menu2/Menu2Container.tsx","Route/RouteConfig.tsx","Route/RouteComponent.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginContainer","to","React","Component","NavbarContainer","navbar","map","route","index","key","style","background","title","props","path","Menu1Container","Fragment","Menu2Container","exact","sidebar","main","routes","RouteComponent","render","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAKqBA,E,iLAGnB,OAME,kBAAC,IAAD,CAAUC,GAAG,e,GAT2BC,IAAMC,WCM7BC,E,iLACV,IAAD,OACR,OACC,4BACEC,EAAOC,KAAI,SAACC,EAAOC,GACnB,OACC,wBAAIC,IAAKD,EAAOE,MAAO,CAAEC,WAAYJ,EAAMK,QAAU,EAAKC,MAAMD,MAAQ,MAAQ,WAC/E,kBAAC,IAAD,CAAMX,GAAIM,EAAMO,MAAOP,EAAMK,gB,GAPSV,IAAMC,WCT9BY,E,iLAEnB,OACC,kBAAC,IAAMC,SAAP,KACC,mD,GAJwCd,IAAMC,WCA7Bc,E,iLAEnB,OACC,kBAAC,IAAMD,SAAP,KACC,mD,GAJwCd,IAAMC,WCIrCE,EAAS,CACpB,CACES,KAAM,SACNI,OAAO,EACPC,QAAS,SAACP,GAAD,OAAmB,kBAAC,EAAD,CAAiBA,MAAOA,KACpDQ,KAAM,kBAAM,kBAAC,EAAD,OACZR,MAAO,UAET,CACEE,KAAM,SACNI,OAAO,EACPC,QAAS,SAACP,GAAD,OAAmB,kBAAC,EAAD,CAAiBA,MAAOA,KACpDQ,KAAM,kBAAM,kBAAC,EAAD,OACZR,MAAO,WAIES,EAAM,CACjB,CACEP,KAAM,IACNI,OAAO,EACPC,QAAS,kBAAM,MACfC,KAAM,kBAAM,kBAAC,EAAD,OACZR,MAAO,UANQ,OAQdP,GCvBgBiB,E,iLAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGD,EAAOf,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,IAAD,CACEC,IAAKD,EACLM,KAAMP,EAAMO,KACZI,MAAOX,EAAMW,MACbK,OAAQ,kBAAMhB,EAAMY,QAAQZ,EAAMK,cAIxC,kBAAC,IAAD,KACGS,EAAOf,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,IAAD,CACEC,IAAKD,EACLM,KAAMP,EAAMO,KACZI,MAAOX,EAAMW,MACbK,OAAQ,kBAAM,kBAAChB,EAAMa,KAAP,kB,GApBgBlB,IAAMC,WCInCqB,EARO,WACpB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.04d0b090.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n\tRedirect\r\n} from \"react-router-dom\";\r\n\r\nexport default class LoginContainer extends React.Component {\r\n\trender() {\r\n\t\tconst isUserLoggedIn = false;\r\n\t\treturn (\r\n\t\t\tisUserLoggedIn ?\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<h2>LoginComponent</h2>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t\t:\r\n\t\t\t\t<Redirect to=\"/menu1\" />\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { navbar } from '../../Route/RouteConfig';\r\n\r\ninterface Props {\r\n\ttitle?: String\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\nexport default class NavbarContainer extends React.Component<Props, State> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<ul>\r\n\t\t\t\t{navbar.map((route, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li key={index} style={{ background: route.title === this.props.title ? 'red' : 'yellow' }}>\r\n\t\t\t\t\t\t\t<Link to={route.path}>{route.title}</Link>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class Menu1Container extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h2>Menu1Component</h2>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class Menu2Container extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h2>Menu2Component</h2>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n}","import React from \"react\";\r\nimport LoginContainer from '../Component/Login/LoginContainer'\r\nimport NavbarContainer from \"../Component/Navbar/NavbarContainer\";\r\nimport Menu1Container from '../Component/Menu1/Menu1Container'\r\nimport Menu2Container from '../Component/Menu2/Menu2Container'\r\n\r\nexport const navbar = [\r\n  {\r\n    path: \"/menu1\",\r\n    exact: true,\r\n    sidebar: (title: String) => <NavbarContainer title={title}/>,\r\n    main: () => <Menu1Container />,\r\n    title: 'Menu 1'\r\n  },\r\n  {\r\n    path: \"/menu2\",\r\n    exact: true,\r\n    sidebar: (title: String) => <NavbarContainer title={title}/>,\r\n    main: () => <Menu2Container />,\r\n    title: 'Menu 2'\r\n  }\r\n]\r\n\r\nexport const routes = [\r\n  {\r\n    path: \"/\",\r\n    exact: true,\r\n    sidebar: () => null,\r\n    main: () => <LoginContainer />,\r\n    title: 'Login'\r\n  },\r\n  ...navbar\r\n];\r\n","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport { routes } from './RouteConfig';\r\n\r\nexport default class RouteComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          {routes.map((route, index) => (\r\n            <Route\r\n              key={index}\r\n              path={route.path}\r\n              exact={route.exact}\r\n              render={() => route.sidebar(route.title)}\r\n            />\r\n          ))}\r\n        </Switch>\r\n        <Switch>\r\n          {routes.map((route, index) => (\r\n            <Route\r\n              key={index}\r\n              path={route.path}\r\n              exact={route.exact}\r\n              render={() => <route.main />}\r\n            />\r\n          ))}\r\n        </Switch>\r\n      </Router>\r\n    )\r\n  };\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport RouteComponent from '../Route/RouteComponent'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <RouteComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}